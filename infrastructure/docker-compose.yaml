version: '3'
services:
  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    container_name: jaeger-query
    restart: unless-stopped
    ports:
      - "16686:16686"
    environment:
      - SPAN_STORAGE_TYPE=opensearch
      - ES_TAGS_AS_FIELDS_ALL=true
      - ES_USERNAME=admin
      - ES_PASSWORD=admin
      - ES_SERVER_URLS=https://opensearch-node1:9200
      - ES_TLS_ENABLED=true
      - ES_TLS_SKIP_HOST_VERIFY=true
      - QUERY_BASE_PATH=/jaeger
    depends_on:
      - opensearch-node1

  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=opensearch
      - ES_TAGS_AS_FIELDS_ALL=true
      - ES_USERNAME=admin
      - ES_PASSWORD=admin
      - ES_TLS_SKIP_HOST_VERIFY=true
    command: [
      "--es.server-urls=https://opensearch-node1:9200",
      "--es.tls.enabled=true",
      "--collector.otlp.enabled=true"
    ]
    depends_on:
      - opensearch-node1

  jaeger-agent:
    image: jaegertracing/jaeger-agent:latest
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"

    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=opensearch
    depends_on:
      - jaeger-collector

  axon-server-1:
    image: axoniq/axonserver-enterprise:2023.0.0-jdk-17-dev
    ports:
      - "9024:8024"
      - "9124:8124"
    environment:
      - axoniq_axonserver_hostname=axon-server-1
      - axoniq_axonserver_internal_hostname=axon-server-1
    env_file:
      - axonserver-variables.env
    volumes:
      - as-1-data:/axonserver/data
      - as-1-events:/axonserver/events
      - as-1-events-second-tier:/axonserver/events-secondtier
      - as-1-plugins:/axonserver/plugins
      - as-1-log:/axonserver/log
      - ./axoniq.license:/axonserver/config/axoniq.license
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
  axon-server-2:
    image: axoniq/axonserver-enterprise:2023.0.0-jdk-17-dev
    ports:
      - "9025:8024"
      - "9125:8124"
    environment:
      - axoniq_axonserver_hostname=axon-server-2
      - axoniq_axonserver_internal_hostname=axon-server-2
    env_file:
      - axonserver-variables.env
    volumes:
      - as-2-data:/axonserver/data
      - as-2-events:/axonserver/events
      - as-2-events-second-tier:/axonserver/events-secondtier
      - as-2-plugins:/axonserver/plugins
      - as-2-log:/axonserver/log
      - ./axoniq.license:/axonserver/config/axoniq.license
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
  axon-server-3:
    image: axoniq/axonserver-enterprise:2023.0.0-jdk-17-dev
    ports:
      - "9026:8024"
      - "9126:8124"
    environment:
      - axoniq_axonserver_hostname=axon-server-3
      - axoniq_axonserver_internal_hostname=axon-server-3
    env_file:
      - axonserver-variables.env
    volumes:
      - as-3-data:/axonserver/data
      - as-3-events:/axonserver/events
      - as-3-events-second-tier:/axonserver/events-secondtier
      - as-3-plugins:/axonserver/plugins
      - as-3-log:/axonserver/log
      - ./axoniq.license:/axonserver/config/axoniq.license
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3

  service-participants:
    image: morlack/axon-observability-service-participants
    ports:
      - '8900-8999:8080'
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name\=Participants,service.version\=0.0.1,deployment.environment\=production
      - OTEL_SERVICE_NAME=Participants
      - MM_TAG_APP=participants
      - spring_datasource_url=jdbc:postgresql://db-participants:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      jaeger-collector:
        condition: service_started
      db-participants:
        condition: service_started
      axon-server-1:
        condition: service_healthy
      axon-server-2:
        condition: service_healthy
      axon-server-3:
        condition: service_healthy
  db-participants:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db-participants:/var/lib/postgresql/data
    ports:
      - '5434:5432'

  service-auction-object-registry:
    image: morlack/axon-observability-service-auction-object-registry
    ports:
      - '8082:8080'
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name\=AuctionObjectRegistry,service.version\=0.0.1,deployment.environment\=production
      - OTEL_SERVICE_NAME=AuctionObjectRegistry
      - MM_TAG_APP=object-registry
      - spring_datasource_url=jdbc:postgresql://db-object-registry:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      jaeger-collector:
        condition: service_started
      db-object-registry:
        condition: service_started
      axon-server-1:
        condition: service_healthy
      axon-server-2:
        condition: service_healthy
      axon-server-3:
        condition: service_healthy
  db-object-registry:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db-object-registry:/var/lib/postgresql/data
    ports:
      - '5435:5432'

  service-auction-query:
    image: morlack/axon-observability-service-auction-query
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name\=AuctionQueries,service.version\=0.0.1,deployment.environment\=production
      - OTEL_SERVICE_NAME=AuctionQueries
      - MM_TAG_APP=auctionquery
      - spring_datasource_url=jdbc:postgresql://db-auction-query:5432/postgres
    env_file:
      - application-variables.env

    depends_on:
      jaeger-collector:
        condition: service_started
      db-auction-query:
        condition: service_started
      axon-server-1:
        condition: service_healthy
      axon-server-2:
        condition: service_healthy
      axon-server-3:
        condition: service_healthy
  db-auction-query:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db-auctionquery:/var/lib/postgresql/data
    ports:
      - '5436:5432'

  service-auctions:
    image: morlack/axon-observability-service-auctions
    ports:
      - '8084:8080'
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name\=Auctions,service.version\=0.0.1,deployment.environment\=production
      - OTEL_SERVICE_NAME=Auctions
      - MM_TAG_APP=auctions
      - spring_datasource_url=jdbc:postgresql://db-auctions:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      jaeger-collector:
        condition: service_started
      db-auctions:
        condition: service_started
      axon-server-1:
        condition: service_healthy
      axon-server-2:
        condition: service_healthy
      axon-server-3:
        condition: service_healthy
  db-auctions:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db-auctions:/var/lib/postgresql/data
    ports:
      - '5437:5432'

  service-interfaces:
    image: morlack/axon-observability-service-interfaces
    ports:
      - '8087:8080'
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name\=Interfaces,service.version\=0.0.1,deployment.environment\=production
      - OTEL_SERVICE_NAME=Interfaces
      - MM_TAG_APP=interfaces
      - spring_datasource_url=jdbc:postgresql://db-interfaces:5432/postgres
    env_file:
      - application-variables.env
    depends_on:
      jaeger-collector:
        condition: service_started
      db-interfaces:
        condition: service_started
      axon-server-1:
        condition: service_healthy
      axon-server-2:
        condition: service_healthy
      axon-server-3:
        condition: service_healthy
  db-interfaces:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db-interfaces:/var/lib/postgresql/data
    ports:
      - '5438:5432'


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    depends_on:
      - axon-server-1
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana-storage:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - renderer
  renderer:
    image: grafana/grafana-image-renderer:3.5.0
    ports:
    - "8081"

  nginx:
    image: morlack/axon-observability-landing
    ports:
      - "8080:80"
    restart: unless-stopped
    depends_on:
      - axon-server-1
      - jaeger-query
      - service-auction-object-registry
      - service-auction-query
      - service-auctions
      - service-interfaces
      - service-participants
      - grafana

volumes:
  grafana-storage:
  prometheus-storage:
  opensearch-data1:
  as-1-data:
  as-1-events:
  as-1-events-second-tier:
  as-1-plugins:
  as-1-log:
  as-2-data:
  as-2-events:
  as-2-events-second-tier:
  as-2-plugins:
  as-2-log:
  as-3-data:
  as-3-events-second-tier:
  as-3-events:
  as-3-plugins:
  as-3-log:
  db-object-registry:
  db-auctions:
  db-auctionquery:
  db-participants:
  db-interfaces:
